# This is example contains the bare mininum to get nginx going with
# Unicorn or Rainbows! servers.  Generally these configuration settings
# are applicable to other HTTP application servers (and not just Ruby
# ones), so if you have one working well for proxying another app
# server, feel free to continue using it.
#
# The only setting we feel strongly about is the fail_timeout=0
# directive in the "upstream" block.  max_fails=0 also has the same
# effect as fail_timeout=0 for current versions of nginx and may be
# used in its place.
#
# Users are strongly encouraged to refer to nginx documentation for more
# details and search for other example configs.

# you generally only need one nginx worker unless you're serving
# large amounts of static files which require blocking disk reads
worker_processes <%= @node[:nginx][:worker_processes] %>;

# in order to free some CPU cycles, we will adjust a timer resolution.
# Basically, it means how often nginx calls  gettimeoftheday() function
# (no default value, nginx documentation provides 100ms as an example):
timer_resolution 500ms;

# We want to be able to open as many files as possible within a single
# nginx worker process without crashing, so weâ€™re increasing this number
# (default is 1024, you might also want to increase fs.file-max sysctl param):
worker_rlimit_nofile 10240;

# drop privileges, root is needed on most systems for binding to port 80
# (or anything < 1024).  Capability-based security may be available for
# your system and worth checking out so you won't need to be root to
# start nginx to bind on 80
# user nobody nogroup; # for systems with a "nogroup"
# user nobody nobody; # for systems with "nobody" as a group instead

# Feel free to change all paths to suite your needs here, of course
# pid /path/to/nginx.pid;
error_log /var/log/nginx.error.log;


events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # "on" if nginx worker_processes > 1
  use epoll; # enable for Linux 2.6+
  # use kqueue; # enable for FreeBSD, OSX
}

http {
  include mime.types;
  default_type application/octet-stream;
  access_log /var/log/nginx.access.log combined;

  sendfile on;

  tcp_nopush on; # off may be better for *some* Comet/long-poll stuff
  tcp_nodelay off; # on may be better for some Comet/long-poll stuff

  # cache settings
  proxy_cache_path /var/lib/nginx/cache  levels=1:2  keys_zone=cache:80m inactive=1d  max_size=2500m;
  proxy_cache_key "$scheme$request_method$host$request_uri";
  proxy_cache cache;
  proxy_cache_valid  200 302  1d;
  proxy_cache_valid  301      1d;
  proxy_cache_valid  any      1m;
  proxy_buffer_size           32k;
  proxy_buffers               4 32k;
  proxy_busy_buffers_size     32k;
  proxy_temp_file_write_size  32k;
  
  # compression
  gzip on;
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_disable "MSIE [1-6]\.";
  gzip_types text/plain text/xml text/css
             text/comma-separated-values
             text/javascript application/x-javascript
             application/atom+xml;

  upstream cornkits {
    server 127.0.0.1:8080;
  }

  upstream staging {
    server 127.0.0.1:8000;
  }

  upstream dentonator {
    server 127.0.0.1:8010;
  }

  server {
    listen 80 default deferred; # for Linux

    client_max_body_size 4G;
    server_name davesims.net davesi.ms;
    server_name_in_redirect off;
    server_tokens off;
    keepalive_timeout 5;
    root /var/www/current/cornkits/public;
    try_files $uri/index.html $uri.html $uri @app;

    location @app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://cornkits;
    }

    # Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /var/www/cornkits/current/public;
    }
  }

  server {
    listen 80; # for Linux

    client_max_body_size 4G;
    server_name staging.davesims.net; 
    keepalive_timeout 5;
    root /var/www/staging/current/public;
    try_files $uri/index.html $uri.html $uri @app;

    location @app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://staging;
    }

    # Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /var/www/staging/current/public;
    }
  }

  server {
    listen 80; # for Linux

    client_max_body_size 4G;
    server_name dentonator.davesims.net;
    keepalive_timeout 5;
    root /var/www/dentonator/current/public;
    try_files $uri/index.html $uri.html $uri @app;

    location @app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://dentonator;
    }

    # Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /var/www/dentonator/current/public;
    }
  }

  server {
    listen 80; # for Linux

    client_max_body_size 4G;
    server_name www.littledguitars.com littledguitars.com; 
    keepalive_timeout 5;
    root /var/www/staging/current/public;
    try_files $uri/index.html $uri.html $uri @app;

    location @app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://staging;
    }

    # Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /var/www/staging/current/public;
    }
  }
}
